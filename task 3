#include <iostream>
#include <vector>

using namespace std;

const int BOARD_SIZE = 3;
const char PLAYER_X = 'X';
const char PLAYER_O = 'O';

class TicTacToe {
public:
    TicTacToe() {
        board.resize(BOARD_SIZE, vector<char>(BOARD_SIZE, ' '));
        currentPlayer = PLAYER_X;
        isGameOver = false;
    }

    void displayBoard() {
        cout << "Current Board:" << endl;
        for (int row = 0; row < BOARD_SIZE; ++row) {
            for (int col = 0; col < BOARD_SIZE; ++col) {
                cout << board[row][col];
                if (col < BOARD_SIZE - 1) cout << " | ";
            }
            cout << endl;
            if (row < BOARD_SIZE - 1) cout << "---------" << endl;
        }
    }

    bool makeMove(int row, int col) {
        if (row < 0 || row >= BOARD_SIZE || col < 0 || col >= BOARD_SIZE || board[row][col] != ' ') {
            cout << "Invalid move. Try again." << endl;
            return false;
        }

        board[row][col] = currentPlayer;
        return true;
    }

    bool checkWin() {
        // Check rows, columns, and diagonals for a win
        for (int i = 0; i < BOARD_SIZE; ++i) {
            if (board[i][0] == currentPlayer && board[i][1] == currentPlayer && board[i][2] == currentPlayer) return true; // Rows
            if (board[0][i] == currentPlayer && board[1][i] == currentPlayer && board[2][i] == currentPlayer) return true; // Columns
        }
        if (board[0][0] == currentPlayer && board[1][1] == currentPlayer && board[2][2] == currentPlayer) return true; // Diagonal
        if (board[0][2] == currentPlayer && board[1][1] == currentPlayer && board[2][0] == currentPlayer) return true; // Anti-diagonal
        return false;
    }

    bool checkDraw() {
        for (int i = 0; i < BOARD_SIZE; ++i) {
            for (int j = 0; j < BOARD_SIZE; ++j) {
                if (board[i][j] == ' ') return false; // If any cell is empty, the game is not a draw yet
            }
        }
        return true; // All cells are filled, and no player has won
    }

    void switchPlayers() {
        currentPlayer = (currentPlayer == PLAYER_X) ? PLAYER_O : PLAYER_X;
    }

    bool isGameFinished() {
        if (checkWin()) {
            displayBoard();
            cout << "Player " << currentPlayer << " wins!" << endl;
            return true;
        }
        if (checkDraw()) {
            displayBoard();
            cout << "It's a draw!" << endl;
            return true;
        }
        return false;
    }

private:
    vector<vector<char>> board;
    char currentPlayer;
    bool isGameOver;
};

int main() {
    TicTacToe game;

    cout << "Welcome to Tic-Tac-Toe!" << endl;

    while (!game.isGameFinished()) {
        game.displayBoard();
        int row, col;
        cout << "Player " << game.getCurrentPlayer() << ", enter row (0-2) and column (0-2) separated by space: ";
        cin >> row >> col;
        if (game.makeMove(row, col)) {
            game.switchPlayers();
        }
    }

    return 0;
}
